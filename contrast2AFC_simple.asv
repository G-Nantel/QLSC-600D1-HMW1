gen


func
tion contrast2AFC_simple
% 2AFC Visibility (Gabor). Keys: LeftArrow / RightArrow, ESC=quit.
try
  AssertOpenGL; KbName('UnifyKeyNames');
  escKey   = KbName('ESCAPE');
  leftKey  = KbName('LeftArrow');
  rightKey = KbName('RightArrow');

  % Laptop: 1 ; Lab: 0
  Screen('Preference','SkipSyncTests',1);

  whichScreen = max(Screen('Screens'));
  bg = 128; white = 255;
  [win, rect] = PsychImaging('OpenWindow', whichScreen, bg, [0 0 1000 800]);
  Screen('BlendFunction', win, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  Screen('TextFont', win, 'Helvetica'); Screen('TextSize', win, 28);
  HideCursor(win);
  [cx, cy] = RectCenter(rect);

  % ---- Participant name ----
  ListenChar(2);
  DrawFormattedText(win,'Enter your NAME, then press Return:','center',cy-60,white);
  nameStr = GetEchoString(win,'',cx-300,cy,white,bg); nameStr = strtrim(nameStr);
  if isempty(nameStr), nameStr = 'anon'; end
  ListenChar(0);

  DrawFormattedText(win,sprintf('Welcome, %s!\n\nPress any key for instructions.',nameStr),'center','center',white);
  Screen('Flip',win); KbStrokeWait;

  % ---- Instructions (visibility wording) ----
  instr = ['You will see TWO striped patches (left & right).' newline ...
           'One side will look CLEARER / MORE VISIBLE.' newline newline ...
           'Choose which side looks clearer:' newline ...
           '  ←  LeftArrow   |   RightArrow  →' newline newline ...
           'Press ESC to quit.' newline newline ...
           'Press any key to begin (10 trials).'];
  DrawFormattedText(win, instr, 'center','center', white, 75);
  Screen('Flip', win); KbStrokeWait;

  % ---- Geometry ----
  apSz = 220; gap = 240;
  leftRect  = CenterRectOnPoint([0 0 apSz apSz],  cx - (apSz/2 + gap/2), cy);
  rightRect = CenterRectOnPoint([0 0 apSz apSz],  cx + (apSz/2 + gap/2), cy);

  % ---- Gabor base (shared scale) ----
  x = -110:+110; y = -110:+110; [X,Y] = meshgrid(x,y);
  params = gabor_params; params.orient = 0;
  baseG = gabor(X,Y,params);                      % ~ -1..1
  baseG = baseG ./ max(1e-6, max(abs(baseG(:)))); % shared normalization

  % ---- Trial plan (10 trials) ----
  nTrials = 10;
  baseLevels = [0.30 0.50 0.70];   % overall level
  deltas     = [0.25 0.35];        % clearly different

  % Safe construction: explicit column vectors
  baseList  = baseLevels( randi(numel(baseLevels), [nTrials,1]) );
  deltaList = deltas(     randi(numel(deltas),     [nTrials,1]) );

  % ---- Data ----
  data(nTrials) = struct('trial',[], 'name',"", ...
                         'leftLevel',[], 'rightLevel',[], ...
                         'clearerSide',"", 'keyName',"", 'key',[], ...
                         'rt',[], 'correct',[]);
  fileStamp = datestr(now,'yyyymmdd_HHMMSS');

  % ---- Run ----
  for t = 1:nTrials
    baseC = baseList(t);
    dC    = deltaList(t);

    leftIsClearer = rand < 0.5;
    hi = min(1.0, baseC + dC/2);
    lo = max(0.0, baseC - dC/2);
    if leftIsClearer, cLeft=hi; cRight=lo; else, cLeft=lo; cRight=hi; end

    % Build images with SHARED scale around gray (no per-image renorm)
    imgL = 127 + 127 * (cLeft  * baseG);
    imgR = 127 + 127 * (cRight * baseG);
    texL = uint8(min(max(imgL,0),255));
    texR = uint8(min(max(imgR,0),255));
    tgL  = Screen('MakeTexture', win, texL);
    tgR  = Screen('MakeTexture', win, texR);

    % Fixation
    DrawFormattedText(win, '+', 'center','center', white);
    Screen('Flip', win); WaitSecs(0.4);

    % Stimulus + hint
    Screen('DrawTexture', win, tgL, [], leftRect);
    Screen('DrawTexture', win, tgR, [], rightRect);
    DrawFormattedText(win,'← Left looks clearer   |   Right looks clearer →   (ESC to quit)','center',rect(4)-60,200);
    tOn = Screen('Flip', win);

    % Response
    KbReleaseWait;
    key = []; keyName=''; rt=NaN;
    while true
      [down, secs, kc] = KbCheck(-1);
      if down
        if kc(escKey)
          key = escKey; keyName='ESCAPE'; rt=NaN;
          if t>1, data=data(1:t-1); else, data=data([]); end
          Screen('Flip',win);
          break
        elseif kc(leftKey) || kc(rightKey)
          rt = secs - tOn;
          if kc(leftKey),  key=leftKey;  keyName='LeftArrow';
          else,            key=rightKey; keyName='RightArrow';
          end
          break
        end
      end
    end
    Screen('Flip', win);
    if ~isempty(key) && key==escKey, break; end

    % Score & store
    choseLeft  = (key == leftKey);
    choseRight = (key == rightKey);
    correct = (leftIsClearer && choseLeft) || (~leftIsClearer && choseRight);

    data(t).trial       = t;
    data(t).name        = string(nameStr);
    data(t).leftLevel   = cLeft;
    data(t).rightLevel  = cRight;
    data(t).clearerSide = string(ifelse(leftIsClearer,'left','right'));
    data(t).keyName     = string(keyName);
    data(t).key         = key;
    data(t).rt          = rt;
    data(t).correct     = logical(correct);

    Screen('Close', tgL); Screen('Close', tgR);
    WaitSecs(0.15);
  end

  % ---- Save ----
  base = sprintf('visibility2AFC_%s_%s', regexprep(nameStr,'\s+','_'), fileStamp);
  save([base '.mat'], 'data');
  if ~isempty(data)
    T = table( ...
      [data.trial].', string({data.name}).', ...
      [data.leftLevel].', [data.rightLevel].', ...
      string({data.clearerSide}).', string({data.keyName}).', ...
      [data.key].', [data.rt].', [data.correct].', ...
      'VariableNames', {'trial','name','leftLevel','rightLevel','clearerSide','keyName','key','rt','correct'} );
    writetable(T,[base '.csv']);
  end

  % ---- Debrief ----
  acc = NaN; if ~isempty(data) && any(~isnan([data.correct])), acc = mean([data.correct])*100; end
  DrawFormattedText(win, sprintf('Done. Saved: %s.mat/.csv\nAccuracy: %.1f%%', base, acc), 'center','center', white);
  Screen('Flip', win); KbStrokeWait;

  ShowCursor; Screen('CloseAll');

catch ME
  ListenChar(0);
  ShowCursor; Screen('CloseAll');
  rethrow(ME);
end
end

function s = ifelse(cond,a,b)
if cond, s = a; else, s = b; end
end



